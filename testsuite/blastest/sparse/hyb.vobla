/*
 * Copyright (c) 2013-2014, ARM Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
storage HybStorage {
  // General properties of the matrix
  nRows: Index;
  nCols: Index;
  // Ell data
  ellWidth: Index;
  ellColIdx: Index[ellWidth][nRows];
  ellData: Value[ellWidth][nRows];
  // CSR data
  nCsrRows: Index;
  nCsrNonZeros: Index;
  csrRowPtr: Index[nCsrRows+1];
  csrColIdx: Index[nCsrNonZeros];
  csrRowIdx: Index[nCsrNonZeros];
  csrData: Value[nCsrNonZeros];
}

type Hyb: HybStorage implements SparseIterable<Value>[][] {
  parameter:
  interface:
    getLen1(): Index { return nRows; }
    getLen2(): Index { return nCols; }

    sparseIterate(): range<Index, Index, &Value> {
      yield i, ellColIdx[k][i], ellData[k][i]
        forall k in 0:ellWidth-1, i in 0:nRows-1;
      yield csrRowIdx[i], csrColIdx[k], csrData[k]
        forall i in 0:nRows-1, k in csrRowPtr[i]:csrRowPtr[i+1]-1;
    }
}
