/*
 * Copyright (c) 2013-2014, ARM Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
import datastruct.storages;

// Example of layout/storage for band matrices
//          LAYOUT                          STORAGE
//            n                                n
//   [ a00 a01         ]              [     a00 a10 a20 ]
//   [ a10 a11 a12     ]  kl + 1 + ku [ a01 a11 a21 a31 ]
//   [ a20 a21 a22 a23 ]              [ a12 a22 a32 a42 ]
// m [     a31 a32 a33 ]              [ a23 a33 a42 a53 ]
//   [         a42 a43 ]
//   [             a53 ]
//   [                 ]

view TransSparseArray: SparseArray[][] implements SparseArray<Value>[][] {
  getLen1(): Index { return len(base, 2); }
  getLen2(): Index { return len(base, 1); }

  sparse(): range<Index, Index, &Value> {
    yield j, i, v forall i, j, v in base.sparse();
  }

  iterate(): range<Index, Index, Value> {
    yield j, i, v forall i, j, v in base.iterate();
  }
}

type BandMatrix: PlainMatrixStorage implements SparseArray<Value>[][] {
  parameter:
    m: Index;
    n: Index;
    kl: Index;
    ku: Index;
  interface:
    getLen1(): Index { return m; }
    getLen2(): Index { return n; }

    sparse(): range<Index, Index, &Value> {
      yield i, j, ApplyConj(data[i][kl+j-i])
        forall i in 0:m-1, j in max(0, i-kl):min(n-1, i+ku);
    }

    iterate(): range<Index, Index, Value> {
      yield i, j, 0 forall i in 0: m-1, j in 0:i-kl-1;
      yield i, j, v forall i, j, v in sparse();
      yield i, j, 0 forall i in 0: m-1, j in i+ku+1:n-1;
    }
}

type TransBandMatrix = TransSparseArray(BandMatrix);
