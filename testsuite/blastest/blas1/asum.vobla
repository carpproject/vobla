/*
 * Copyright (c) 2013-2014, ARM Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
// Return the sum of the elements of X
function asum(in X: Value[]): Real {
  return sum(abs(Re(Xi)) + abs(Im(Xi)) forall _, Xi in X.sparse);
}

export asum<Float>(X is          Column) as sasum_n;
export asum<Float>(X is Reversed Column) as sasum_r;

export asum<Double>(X is          Column) as dasum_n;
export asum<Double>(X is Reversed Column) as dasum_r;

export asum<Complex Float>(X is          Column) as scasum_n;
export asum<Complex Float>(X is Reversed Column) as scasum_r;

export asum<Complex Double>(X is          Column) as dzasum_n;
export asum<Complex Double>(X is Reversed Column) as dzasum_r;
