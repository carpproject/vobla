/*
 * Copyright (c) 2013-2014, ARM Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
// Return X^T * Y
function dot(in X: Value[n], in Y: Value[n]): Value {
  return sum(Xi*Y[i] forall i, Xi in X.sparse);
}

// DOT
export dot<Float>(X is          Column, Y is          Column) as sdot_nn;
export dot<Float>(X is          Column, Y is Reversed Column) as sdot_nr;
export dot<Float>(X is Reversed Column, Y is          Column) as sdot_rn;
export dot<Float>(X is Reversed Column, Y is Reversed Column) as sdot_rr;

export dot<Double>(X is          Column, Y is          Column) as ddot_nn;
export dot<Double>(X is          Column, Y is Reversed Column) as ddot_nr;
export dot<Double>(X is Reversed Column, Y is          Column) as ddot_rn;
export dot<Double>(X is Reversed Column, Y is Reversed Column) as ddot_rr;

// DOTU
export dot<Complex Float>(X is          Column, Y is          Column) as cdotu_nn;
export dot<Complex Float>(X is          Column, Y is Reversed Column) as cdotu_nr;
export dot<Complex Float>(X is Reversed Column, Y is          Column) as cdotu_rn;
export dot<Complex Float>(X is Reversed Column, Y is Reversed Column) as cdotu_rr;

export dot<Complex Double>(X is          Column, Y is          Column) as zdotu_nn;
export dot<Complex Double>(X is          Column, Y is Reversed Column) as zdotu_nr;
export dot<Complex Double>(X is Reversed Column, Y is          Column) as zdotu_rn;
export dot<Complex Double>(X is Reversed Column, Y is Reversed Column) as zdotu_rr;

// DOTC
export dot<Complex Float>(X is Conjugated          Column, Y is          Column) as cdotc_nn;
export dot<Complex Float>(X is Conjugated          Column, Y is Reversed Column) as cdotc_nr;
export dot<Complex Float>(X is Conjugated Reversed Column, Y is          Column) as cdotc_rn;
export dot<Complex Float>(X is Conjugated Reversed Column, Y is Reversed Column) as cdotc_rr;

export dot<Complex Double>(X is Conjugated          Column, Y is          Column) as zdotc_nn;
export dot<Complex Double>(X is Conjugated          Column, Y is Reversed Column) as zdotc_nr;
export dot<Complex Double>(X is Conjugated Reversed Column, Y is          Column) as zdotc_rn;
export dot<Complex Double>(X is Conjugated Reversed Column, Y is Reversed Column) as zdotc_rr;
