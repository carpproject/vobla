/*
 * Copyright (c) 2013-2014, ARM Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

// Compute c, s, r, z such that :
//
// [  c s ][ a ]   [ r ]
// [ -s c ][ b ] = [ 0 ]
//
//     | s    if |a| > |b|
// z = | 1/c  if |a| <= |b| and c != 0
//     | 1    otherwise
//
// r is returned in a
// z is returned in b

function rotg (out A: Real[1], out B: Real[1], out C: Real[1], out S: Real[1]) {
  let a = A[0];
  let b = B[0];
  let absA = abs(a);
  let absB = abs(b);
  let r = sqrt(a*a + b*b);

  if(r == 0.0) {
    C[0] = 1.0;
    S[0] = 0.0;
    A[0] = 0.0;
    B[0] = 0.0;
  } else {

    if(a+b < 0.0) { r = -r; }

    C[0] = a/r;
    S[0] = b/r;
    A[0] = r;

    let z = 1.0;
    if(absA > absB) { z = S[0]; }
    else { if(C[0] != 0.0) { z = 1.0/C[0]; } }
    B[0] = z;
  }
}

export rotg<Float>(A is Row, B is Row, C is Row, S is Row) as srotg;
export rotg<Double>(A is Row, B is Row, C is Row, S is Row) as drotg;
