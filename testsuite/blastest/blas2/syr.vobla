/*
 * Copyright (c) 2013-2014, ARM Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
import datastruct.symmetric;

// Computes A <- alpha*X*X^T + A
function syr(alpha: Value, in X: Value[n], out A: SymmetricMatrix<Value>[n][n]) {
  Aij += alpha*X[i]*X[j] forall i, j, Aij in A.upperTriangle;
}

export syr<Float>(X is          Column, A is UpperSymmetric) as ssyr_un;
export syr<Float>(X is Reversed Column, A is UpperSymmetric) as ssyr_ur;
export syr<Float>(X is          Column, A is LowerSymmetric) as ssyr_ln;
export syr<Float>(X is Reversed Column, A is LowerSymmetric) as ssyr_lr;

export syr<Double>(X is          Column, A is UpperSymmetric) as dsyr_un;
export syr<Double>(X is Reversed Column, A is UpperSymmetric) as dsyr_ur;
export syr<Double>(X is          Column, A is LowerSymmetric) as dsyr_ln;
export syr<Double>(X is Reversed Column, A is LowerSymmetric) as dsyr_lr;

export syr<Float>(X is          Column, A is UpperPackSymmetric) as sspr_un;
export syr<Float>(X is Reversed Column, A is UpperPackSymmetric) as sspr_ur;
export syr<Float>(X is          Column, A is LowerPackSymmetric) as sspr_ln;
export syr<Float>(X is Reversed Column, A is LowerPackSymmetric) as sspr_lr;

export syr<Double>(X is          Column, A is UpperPackSymmetric) as dspr_un;
export syr<Double>(X is Reversed Column, A is UpperPackSymmetric) as dspr_ur;
export syr<Double>(X is          Column, A is LowerPackSymmetric) as dspr_ln;
export syr<Double>(X is Reversed Column, A is LowerPackSymmetric) as dspr_lr;
