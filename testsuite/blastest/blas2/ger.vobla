/*
 * Copyright (c) 2013-2014, ARM Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
// Computes A <- alpha*X*(Y^T) + A
function ger(alpha: Value, in X: Value[m], in Y: Value[n], out A: Value[m][n]) {
  Aij += alpha*X[i]*Y[j] forall i, j, Aij in A;
}

export ger<Float>(X is          Column, Y is          Column, A is Transposed) as sger_nn;
export ger<Float>(X is          Column, Y is Reversed Column, A is Transposed) as sger_nr;
export ger<Float>(X is Reversed Column, Y is          Column, A is Transposed) as sger_rn;
export ger<Float>(X is Reversed Column, Y is Reversed Column, A is Transposed) as sger_rr;

export ger<Double>(X is          Column, Y is          Column, A is Transposed) as dger_nn;
export ger<Double>(X is          Column, Y is Reversed Column, A is Transposed) as dger_nr;
export ger<Double>(X is Reversed Column, Y is          Column, A is Transposed) as dger_rn;
export ger<Double>(X is Reversed Column, Y is Reversed Column, A is Transposed) as dger_rr;

export ger<Complex Float>(X is          Column, Y is          Column, A is Transposed) as cgeru_nn;
export ger<Complex Float>(X is          Column, Y is Reversed Column, A is Transposed) as cgeru_nr;
export ger<Complex Float>(X is Reversed Column, Y is          Column, A is Transposed) as cgeru_rn;
export ger<Complex Float>(X is Reversed Column, Y is Reversed Column, A is Transposed) as cgeru_rr;

export ger<Complex Double>(X is          Column, Y is          Column, A is Transposed) as zgeru_nn;
export ger<Complex Double>(X is          Column, Y is Reversed Column, A is Transposed) as zgeru_nr;
export ger<Complex Double>(X is Reversed Column, Y is          Column, A is Transposed) as zgeru_rn;
export ger<Complex Double>(X is Reversed Column, Y is Reversed Column, A is Transposed) as zgeru_rr;

export ger<Complex Float>(X is          Column, Y is Conjugated          Column, A is Transposed) as cgerc_nn;
export ger<Complex Float>(X is          Column, Y is Conjugated Reversed Column, A is Transposed) as cgerc_nr;
export ger<Complex Float>(X is Reversed Column, Y is Conjugated          Column, A is Transposed) as cgerc_rn;
export ger<Complex Float>(X is Reversed Column, Y is Conjugated Reversed Column, A is Transposed) as cgerc_rr;

export ger<Complex Double>(X is          Column, Y is Conjugated          Column, A is Transposed) as zgerc_nn;
export ger<Complex Double>(X is          Column, Y is Conjugated Reversed Column, A is Transposed) as zgerc_nr;
export ger<Complex Double>(X is Reversed Column, Y is Conjugated          Column, A is Transposed) as zgerc_rn;
export ger<Complex Double>(X is Reversed Column, Y is Conjugated Reversed Column, A is Transposed) as zgerc_rr;
