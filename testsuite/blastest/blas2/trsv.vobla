/*
 * Copyright (c) 2013-2014, ARM Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
// Computes X <- A^(-1)*X
import datastruct.triangular;

function trsv(in A: TriangularMatrix<Value>[n][n], out X: Value[n]) {
  for(j, Aj, AjBeg in A.triangle.iterateFromSmallRow) {
    let Ajj = (A.diagonal)[j];
    X[j] = (X[j] * (1+Ajj) - sum(X[i+AjBeg]*Aij forall i, Aij in Aj.sparse))/Ajj;
  }
}

export trsv<Float>(A is          UpperTriangular, X is          Column) as strsv_n_eun;
export trsv<Float>(A is          UpperTriangular, X is Reversed Column) as strsv_n_eur;
export trsv<Float>(A is          LowerTriangular, X is          Column) as strsv_n_eln;
export trsv<Float>(A is          LowerTriangular, X is Reversed Column) as strsv_n_elr;
export trsv<Float>(A is      UnitUpperTriangular, X is          Column) as strsv_n_dun;
export trsv<Float>(A is      UnitUpperTriangular, X is Reversed Column) as strsv_n_dur;
export trsv<Float>(A is      UnitLowerTriangular, X is          Column) as strsv_n_dln;
export trsv<Float>(A is      UnitLowerTriangular, X is Reversed Column) as strsv_n_dlr;
export trsv<Float>(A is     TransUpperTriangular, X is          Column) as strsv_t_eun;
export trsv<Float>(A is     TransUpperTriangular, X is Reversed Column) as strsv_t_eur;
export trsv<Float>(A is     TransLowerTriangular, X is          Column) as strsv_t_eln;
export trsv<Float>(A is     TransLowerTriangular, X is Reversed Column) as strsv_t_elr;
export trsv<Float>(A is TransUnitUpperTriangular, X is          Column) as strsv_t_dun;
export trsv<Float>(A is TransUnitUpperTriangular, X is Reversed Column) as strsv_t_dur;
export trsv<Float>(A is TransUnitLowerTriangular, X is          Column) as strsv_t_dln;
export trsv<Float>(A is TransUnitLowerTriangular, X is Reversed Column) as strsv_t_dlr;

export trsv<Double>(A is          UpperTriangular, X is          Column) as dtrsv_n_eun;
export trsv<Double>(A is          UpperTriangular, X is Reversed Column) as dtrsv_n_eur;
export trsv<Double>(A is          LowerTriangular, X is          Column) as dtrsv_n_eln;
export trsv<Double>(A is          LowerTriangular, X is Reversed Column) as dtrsv_n_elr;
export trsv<Double>(A is      UnitUpperTriangular, X is          Column) as dtrsv_n_dun;
export trsv<Double>(A is      UnitUpperTriangular, X is Reversed Column) as dtrsv_n_dur;
export trsv<Double>(A is      UnitLowerTriangular, X is          Column) as dtrsv_n_dln;
export trsv<Double>(A is      UnitLowerTriangular, X is Reversed Column) as dtrsv_n_dlr;
export trsv<Double>(A is     TransUpperTriangular, X is          Column) as dtrsv_t_eun;
export trsv<Double>(A is     TransUpperTriangular, X is Reversed Column) as dtrsv_t_eur;
export trsv<Double>(A is     TransLowerTriangular, X is          Column) as dtrsv_t_eln;
export trsv<Double>(A is     TransLowerTriangular, X is Reversed Column) as dtrsv_t_elr;
export trsv<Double>(A is TransUnitUpperTriangular, X is          Column) as dtrsv_t_dun;
export trsv<Double>(A is TransUnitUpperTriangular, X is Reversed Column) as dtrsv_t_dur;
export trsv<Double>(A is TransUnitLowerTriangular, X is          Column) as dtrsv_t_dln;
export trsv<Double>(A is TransUnitLowerTriangular, X is Reversed Column) as dtrsv_t_dlr;

export trsv<Complex Float>(A is                UpperTriangular, X is          Column) as ctrsv_n_eun;
export trsv<Complex Float>(A is                UpperTriangular, X is Reversed Column) as ctrsv_n_eur;
export trsv<Complex Float>(A is                LowerTriangular, X is          Column) as ctrsv_n_eln;
export trsv<Complex Float>(A is                LowerTriangular, X is Reversed Column) as ctrsv_n_elr;
export trsv<Complex Float>(A is            UnitUpperTriangular, X is          Column) as ctrsv_n_dun;
export trsv<Complex Float>(A is            UnitUpperTriangular, X is Reversed Column) as ctrsv_n_dur;
export trsv<Complex Float>(A is            UnitLowerTriangular, X is          Column) as ctrsv_n_dln;
export trsv<Complex Float>(A is            UnitLowerTriangular, X is Reversed Column) as ctrsv_n_dlr;
export trsv<Complex Float>(A is           TransUpperTriangular, X is          Column) as ctrsv_t_eun;
export trsv<Complex Float>(A is           TransUpperTriangular, X is Reversed Column) as ctrsv_t_eur;
export trsv<Complex Float>(A is           TransLowerTriangular, X is          Column) as ctrsv_t_eln;
export trsv<Complex Float>(A is           TransLowerTriangular, X is Reversed Column) as ctrsv_t_elr;
export trsv<Complex Float>(A is       TransUnitUpperTriangular, X is          Column) as ctrsv_t_dun;
export trsv<Complex Float>(A is       TransUnitUpperTriangular, X is Reversed Column) as ctrsv_t_dur;
export trsv<Complex Float>(A is       TransUnitLowerTriangular, X is          Column) as ctrsv_t_dln;
export trsv<Complex Float>(A is       TransUnitLowerTriangular, X is Reversed Column) as ctrsv_t_dlr;
export trsv<Complex Float>(A is Conjugated     UpperTriangular, X is          Column) as ctrsv_c_eun;
export trsv<Complex Float>(A is Conjugated     UpperTriangular, X is Reversed Column) as ctrsv_c_eur;
export trsv<Complex Float>(A is Conjugated     LowerTriangular, X is          Column) as ctrsv_c_eln;
export trsv<Complex Float>(A is Conjugated     LowerTriangular, X is Reversed Column) as ctrsv_c_elr;
export trsv<Complex Float>(A is Conjugated UnitUpperTriangular, X is          Column) as ctrsv_c_dun;
export trsv<Complex Float>(A is Conjugated UnitUpperTriangular, X is Reversed Column) as ctrsv_c_dur;
export trsv<Complex Float>(A is Conjugated UnitLowerTriangular, X is          Column) as ctrsv_c_dln;
export trsv<Complex Float>(A is Conjugated UnitLowerTriangular, X is Reversed Column) as ctrsv_c_dlr;

export trsv<Complex Double>(A is                UpperTriangular, X is          Column) as ztrsv_n_eun;
export trsv<Complex Double>(A is                UpperTriangular, X is Reversed Column) as ztrsv_n_eur;
export trsv<Complex Double>(A is                LowerTriangular, X is          Column) as ztrsv_n_eln;
export trsv<Complex Double>(A is                LowerTriangular, X is Reversed Column) as ztrsv_n_elr;
export trsv<Complex Double>(A is            UnitUpperTriangular, X is          Column) as ztrsv_n_dun;
export trsv<Complex Double>(A is            UnitUpperTriangular, X is Reversed Column) as ztrsv_n_dur;
export trsv<Complex Double>(A is            UnitLowerTriangular, X is          Column) as ztrsv_n_dln;
export trsv<Complex Double>(A is            UnitLowerTriangular, X is Reversed Column) as ztrsv_n_dlr;
export trsv<Complex Double>(A is           TransUpperTriangular, X is          Column) as ztrsv_t_eun;
export trsv<Complex Double>(A is           TransUpperTriangular, X is Reversed Column) as ztrsv_t_eur;
export trsv<Complex Double>(A is           TransLowerTriangular, X is          Column) as ztrsv_t_eln;
export trsv<Complex Double>(A is           TransLowerTriangular, X is Reversed Column) as ztrsv_t_elr;
export trsv<Complex Double>(A is       TransUnitUpperTriangular, X is          Column) as ztrsv_t_dun;
export trsv<Complex Double>(A is       TransUnitUpperTriangular, X is Reversed Column) as ztrsv_t_dur;
export trsv<Complex Double>(A is       TransUnitLowerTriangular, X is          Column) as ztrsv_t_dln;
export trsv<Complex Double>(A is       TransUnitLowerTriangular, X is Reversed Column) as ztrsv_t_dlr;
export trsv<Complex Double>(A is Conjugated     UpperTriangular, X is          Column) as ztrsv_c_eun;
export trsv<Complex Double>(A is Conjugated     UpperTriangular, X is Reversed Column) as ztrsv_c_eur;
export trsv<Complex Double>(A is Conjugated     LowerTriangular, X is          Column) as ztrsv_c_eln;
export trsv<Complex Double>(A is Conjugated     LowerTriangular, X is Reversed Column) as ztrsv_c_elr;
export trsv<Complex Double>(A is Conjugated UnitUpperTriangular, X is          Column) as ztrsv_c_dun;
export trsv<Complex Double>(A is Conjugated UnitUpperTriangular, X is Reversed Column) as ztrsv_c_dur;
export trsv<Complex Double>(A is Conjugated UnitLowerTriangular, X is          Column) as ztrsv_c_dln;
export trsv<Complex Double>(A is Conjugated UnitLowerTriangular, X is Reversed Column) as ztrsv_c_dlr;

export trsv<Float>(A is          UpperPackTriangular, X is          Column) as stpsv_n_eun;
export trsv<Float>(A is          UpperPackTriangular, X is Reversed Column) as stpsv_n_eur;
export trsv<Float>(A is          LowerPackTriangular, X is          Column) as stpsv_n_eln;
export trsv<Float>(A is          LowerPackTriangular, X is Reversed Column) as stpsv_n_elr;
export trsv<Float>(A is      UnitUpperPackTriangular, X is          Column) as stpsv_n_dun;
export trsv<Float>(A is      UnitUpperPackTriangular, X is Reversed Column) as stpsv_n_dur;
export trsv<Float>(A is      UnitLowerPackTriangular, X is          Column) as stpsv_n_dln;
export trsv<Float>(A is      UnitLowerPackTriangular, X is Reversed Column) as stpsv_n_dlr;
export trsv<Float>(A is     TransUpperPackTriangular, X is          Column) as stpsv_t_eun;
export trsv<Float>(A is     TransUpperPackTriangular, X is Reversed Column) as stpsv_t_eur;
export trsv<Float>(A is     TransLowerPackTriangular, X is          Column) as stpsv_t_eln;
export trsv<Float>(A is     TransLowerPackTriangular, X is Reversed Column) as stpsv_t_elr;
export trsv<Float>(A is TransUnitUpperPackTriangular, X is          Column) as stpsv_t_dun;
export trsv<Float>(A is TransUnitUpperPackTriangular, X is Reversed Column) as stpsv_t_dur;
export trsv<Float>(A is TransUnitLowerPackTriangular, X is          Column) as stpsv_t_dln;
export trsv<Float>(A is TransUnitLowerPackTriangular, X is Reversed Column) as stpsv_t_dlr;

export trsv<Double>(A is          UpperPackTriangular, X is          Column) as dtpsv_n_eun;
export trsv<Double>(A is          UpperPackTriangular, X is Reversed Column) as dtpsv_n_eur;
export trsv<Double>(A is     TransUpperPackTriangular, X is          Column) as dtpsv_t_eun;
export trsv<Double>(A is     TransUpperPackTriangular, X is Reversed Column) as dtpsv_t_eur;
export trsv<Double>(A is          LowerPackTriangular, X is          Column) as dtpsv_n_eln;
export trsv<Double>(A is          LowerPackTriangular, X is Reversed Column) as dtpsv_n_elr;
export trsv<Double>(A is     TransLowerPackTriangular, X is          Column) as dtpsv_t_eln;
export trsv<Double>(A is     TransLowerPackTriangular, X is Reversed Column) as dtpsv_t_elr;
export trsv<Double>(A is      UnitUpperPackTriangular, X is          Column) as dtpsv_n_dun;
export trsv<Double>(A is      UnitUpperPackTriangular, X is Reversed Column) as dtpsv_n_dur;
export trsv<Double>(A is      UnitLowerPackTriangular, X is          Column) as dtpsv_n_dln;
export trsv<Double>(A is      UnitLowerPackTriangular, X is Reversed Column) as dtpsv_n_dlr;
export trsv<Double>(A is TransUnitUpperPackTriangular, X is          Column) as dtpsv_t_dun;
export trsv<Double>(A is TransUnitUpperPackTriangular, X is Reversed Column) as dtpsv_t_dur;
export trsv<Double>(A is TransUnitLowerPackTriangular, X is          Column) as dtpsv_t_dln;
export trsv<Double>(A is TransUnitLowerPackTriangular, X is Reversed Column) as dtpsv_t_dlr;

export trsv<Complex Float>(A is                     UpperPackTriangular, X is          Column) as ctpsv_n_eun;
export trsv<Complex Float>(A is                     UpperPackTriangular, X is Reversed Column) as ctpsv_n_eur;
export trsv<Complex Float>(A is                     LowerPackTriangular, X is          Column) as ctpsv_n_eln;
export trsv<Complex Float>(A is                     LowerPackTriangular, X is Reversed Column) as ctpsv_n_elr;
export trsv<Complex Float>(A is                 UnitUpperPackTriangular, X is          Column) as ctpsv_n_dun;
export trsv<Complex Float>(A is                 UnitUpperPackTriangular, X is Reversed Column) as ctpsv_n_dur;
export trsv<Complex Float>(A is                 UnitLowerPackTriangular, X is          Column) as ctpsv_n_dln;
export trsv<Complex Float>(A is                 UnitLowerPackTriangular, X is Reversed Column) as ctpsv_n_dlr;
export trsv<Complex Float>(A is                TransUpperPackTriangular, X is          Column) as ctpsv_t_eun;
export trsv<Complex Float>(A is                TransUpperPackTriangular, X is Reversed Column) as ctpsv_t_eur;
export trsv<Complex Float>(A is                TransLowerPackTriangular, X is          Column) as ctpsv_t_eln;
export trsv<Complex Float>(A is                TransLowerPackTriangular, X is Reversed Column) as ctpsv_t_elr;
export trsv<Complex Float>(A is            TransUnitUpperPackTriangular, X is          Column) as ctpsv_t_dun;
export trsv<Complex Float>(A is            TransUnitUpperPackTriangular, X is Reversed Column) as ctpsv_t_dur;
export trsv<Complex Float>(A is            TransUnitLowerPackTriangular, X is          Column) as ctpsv_t_dln;
export trsv<Complex Float>(A is            TransUnitLowerPackTriangular, X is Reversed Column) as ctpsv_t_dlr;
export trsv<Complex Float>(A is Conjugated     TransUpperPackTriangular, X is          Column) as ctpsv_u_eun;
export trsv<Complex Float>(A is Conjugated     TransUpperPackTriangular, X is Reversed Column) as ctpsv_u_eur;
export trsv<Complex Float>(A is Conjugated     TransLowerPackTriangular, X is          Column) as ctpsv_u_eln;
export trsv<Complex Float>(A is Conjugated     TransLowerPackTriangular, X is Reversed Column) as ctpsv_u_elr;
export trsv<Complex Float>(A is Conjugated TransUnitUpperPackTriangular, X is          Column) as ctpsv_u_dun;
export trsv<Complex Float>(A is Conjugated TransUnitUpperPackTriangular, X is Reversed Column) as ctpsv_u_dur;
export trsv<Complex Float>(A is Conjugated TransUnitLowerPackTriangular, X is          Column) as ctpsv_u_dln;
export trsv<Complex Float>(A is Conjugated TransUnitLowerPackTriangular, X is Reversed Column) as ctpsv_u_dlr;

export trsv<Complex Double>(A is                     UpperPackTriangular, X is          Column) as ztpsv_n_eun;
export trsv<Complex Double>(A is                     UpperPackTriangular, X is Reversed Column) as ztpsv_n_eur;
export trsv<Complex Double>(A is                     LowerPackTriangular, X is          Column) as ztpsv_n_eln;
export trsv<Complex Double>(A is                     LowerPackTriangular, X is Reversed Column) as ztpsv_n_elr;
export trsv<Complex Double>(A is                 UnitUpperPackTriangular, X is          Column) as ztpsv_n_dun;
export trsv<Complex Double>(A is                 UnitUpperPackTriangular, X is Reversed Column) as ztpsv_n_dur;
export trsv<Complex Double>(A is                 UnitLowerPackTriangular, X is          Column) as ztpsv_n_dln;
export trsv<Complex Double>(A is                 UnitLowerPackTriangular, X is Reversed Column) as ztpsv_n_dlr;
export trsv<Complex Double>(A is                TransUpperPackTriangular, X is          Column) as ztpsv_t_eun;
export trsv<Complex Double>(A is                TransUpperPackTriangular, X is Reversed Column) as ztpsv_t_eur;
export trsv<Complex Double>(A is                TransLowerPackTriangular, X is          Column) as ztpsv_t_eln;
export trsv<Complex Double>(A is                TransLowerPackTriangular, X is Reversed Column) as ztpsv_t_elr;
export trsv<Complex Double>(A is            TransUnitUpperPackTriangular, X is          Column) as ztpsv_t_dun;
export trsv<Complex Double>(A is            TransUnitUpperPackTriangular, X is Reversed Column) as ztpsv_t_dur;
export trsv<Complex Double>(A is            TransUnitLowerPackTriangular, X is          Column) as ztpsv_t_dln;
export trsv<Complex Double>(A is            TransUnitLowerPackTriangular, X is Reversed Column) as ztpsv_t_dlr;
export trsv<Complex Double>(A is Conjugated     TransUpperPackTriangular, X is          Column) as ztpsv_u_eun;
export trsv<Complex Double>(A is Conjugated     TransUpperPackTriangular, X is Reversed Column) as ztpsv_u_eur;
export trsv<Complex Double>(A is Conjugated     TransLowerPackTriangular, X is          Column) as ztpsv_u_eln;
export trsv<Complex Double>(A is Conjugated     TransLowerPackTriangular, X is Reversed Column) as ztpsv_u_elr;
export trsv<Complex Double>(A is Conjugated TransUnitUpperPackTriangular, X is          Column) as ztpsv_u_dun;
export trsv<Complex Double>(A is Conjugated TransUnitUpperPackTriangular, X is Reversed Column) as ztpsv_u_dur;
export trsv<Complex Double>(A is Conjugated TransUnitLowerPackTriangular, X is          Column) as ztpsv_u_dln;
export trsv<Complex Double>(A is Conjugated TransUnitLowerPackTriangular, X is Reversed Column) as ztpsv_u_dlr;

export trsv<Float>(A is          UpperBandTriangular, X is          Column) as stbsv_n_eun;
export trsv<Float>(A is          UpperBandTriangular, X is Reversed Column) as stbsv_n_eur;
export trsv<Float>(A is          LowerBandTriangular, X is          Column) as stbsv_n_eln;
export trsv<Float>(A is          LowerBandTriangular, X is Reversed Column) as stbsv_n_elr;
export trsv<Float>(A is      UnitUpperBandTriangular, X is          Column) as stbsv_n_dun;
export trsv<Float>(A is      UnitUpperBandTriangular, X is Reversed Column) as stbsv_n_dur;
export trsv<Float>(A is      UnitLowerBandTriangular, X is          Column) as stbsv_n_dln;
export trsv<Float>(A is      UnitLowerBandTriangular, X is Reversed Column) as stbsv_n_dlr;
export trsv<Float>(A is     TransUpperBandTriangular, X is          Column) as stbsv_t_eun;
export trsv<Float>(A is     TransUpperBandTriangular, X is Reversed Column) as stbsv_t_eur;
export trsv<Float>(A is     TransLowerBandTriangular, X is          Column) as stbsv_t_eln;
export trsv<Float>(A is     TransLowerBandTriangular, X is Reversed Column) as stbsv_t_elr;
export trsv<Float>(A is TransUnitUpperBandTriangular, X is          Column) as stbsv_t_dun;
export trsv<Float>(A is TransUnitUpperBandTriangular, X is Reversed Column) as stbsv_t_dur;
export trsv<Float>(A is TransUnitLowerBandTriangular, X is          Column) as stbsv_t_dln;
export trsv<Float>(A is TransUnitLowerBandTriangular, X is Reversed Column) as stbsv_t_dlr;

export trsv<Double>(A is          UpperBandTriangular, X is          Column) as dtbsv_n_eun;
export trsv<Double>(A is          UpperBandTriangular, X is Reversed Column) as dtbsv_n_eur;
export trsv<Double>(A is          LowerBandTriangular, X is          Column) as dtbsv_n_eln;
export trsv<Double>(A is          LowerBandTriangular, X is Reversed Column) as dtbsv_n_elr;
export trsv<Double>(A is      UnitUpperBandTriangular, X is          Column) as dtbsv_n_dun;
export trsv<Double>(A is      UnitUpperBandTriangular, X is Reversed Column) as dtbsv_n_dur;
export trsv<Double>(A is      UnitLowerBandTriangular, X is          Column) as dtbsv_n_dln;
export trsv<Double>(A is      UnitLowerBandTriangular, X is Reversed Column) as dtbsv_n_dlr;
export trsv<Double>(A is     TransUpperBandTriangular, X is          Column) as dtbsv_t_eun;
export trsv<Double>(A is     TransUpperBandTriangular, X is Reversed Column) as dtbsv_t_eur;
export trsv<Double>(A is     TransLowerBandTriangular, X is          Column) as dtbsv_t_eln;
export trsv<Double>(A is     TransLowerBandTriangular, X is Reversed Column) as dtbsv_t_elr;
export trsv<Double>(A is TransUnitUpperBandTriangular, X is          Column) as dtbsv_t_dun;
export trsv<Double>(A is TransUnitUpperBandTriangular, X is Reversed Column) as dtbsv_t_dur;
export trsv<Double>(A is TransUnitLowerBandTriangular, X is          Column) as dtbsv_t_dln;
export trsv<Double>(A is TransUnitLowerBandTriangular, X is Reversed Column) as dtbsv_t_dlr;

export trsv<Complex Float>(A is                     UpperBandTriangular, X is          Column) as ctbsv_n_eun;
export trsv<Complex Float>(A is                     UpperBandTriangular, X is Reversed Column) as ctbsv_n_eur;
export trsv<Complex Float>(A is                     LowerBandTriangular, X is          Column) as ctbsv_n_eln;
export trsv<Complex Float>(A is                     LowerBandTriangular, X is Reversed Column) as ctbsv_n_elr;
export trsv<Complex Float>(A is                 UnitUpperBandTriangular, X is          Column) as ctbsv_n_dun;
export trsv<Complex Float>(A is                 UnitUpperBandTriangular, X is Reversed Column) as ctbsv_n_dur;
export trsv<Complex Float>(A is                 UnitLowerBandTriangular, X is          Column) as ctbsv_n_dln;
export trsv<Complex Float>(A is                 UnitLowerBandTriangular, X is Reversed Column) as ctbsv_n_dlr;
export trsv<Complex Float>(A is                TransUpperBandTriangular, X is          Column) as ctbsv_t_eun;
export trsv<Complex Float>(A is                TransUpperBandTriangular, X is Reversed Column) as ctbsv_t_eur;
export trsv<Complex Float>(A is                TransLowerBandTriangular, X is          Column) as ctbsv_t_eln;
export trsv<Complex Float>(A is                TransLowerBandTriangular, X is Reversed Column) as ctbsv_t_elr;
export trsv<Complex Float>(A is            TransUnitUpperBandTriangular, X is          Column) as ctbsv_t_dun;
export trsv<Complex Float>(A is            TransUnitUpperBandTriangular, X is Reversed Column) as ctbsv_t_dur;
export trsv<Complex Float>(A is            TransUnitLowerBandTriangular, X is          Column) as ctbsv_t_dln;
export trsv<Complex Float>(A is            TransUnitLowerBandTriangular, X is Reversed Column) as ctbsv_t_dlr;
export trsv<Complex Float>(A is Conjugated     TransUpperBandTriangular, X is          Column) as ctbsv_u_eun;
export trsv<Complex Float>(A is Conjugated     TransUpperBandTriangular, X is Reversed Column) as ctbsv_u_eur;
export trsv<Complex Float>(A is Conjugated     TransLowerBandTriangular, X is          Column) as ctbsv_u_eln;
export trsv<Complex Float>(A is Conjugated     TransLowerBandTriangular, X is Reversed Column) as ctbsv_u_elr;
export trsv<Complex Float>(A is Conjugated TransUnitUpperBandTriangular, X is          Column) as ctbsv_u_dun;
export trsv<Complex Float>(A is Conjugated TransUnitUpperBandTriangular, X is Reversed Column) as ctbsv_u_dur;
export trsv<Complex Float>(A is Conjugated TransUnitLowerBandTriangular, X is          Column) as ctbsv_u_dln;
export trsv<Complex Float>(A is Conjugated TransUnitLowerBandTriangular, X is Reversed Column) as ctbsv_u_dlr;

export trsv<Complex Double>(A is                     UpperBandTriangular, X is          Column) as ztbsv_n_eun;
export trsv<Complex Double>(A is                     UpperBandTriangular, X is Reversed Column) as ztbsv_n_eur;
export trsv<Complex Double>(A is                     LowerBandTriangular, X is          Column) as ztbsv_n_eln;
export trsv<Complex Double>(A is                     LowerBandTriangular, X is Reversed Column) as ztbsv_n_elr;
export trsv<Complex Double>(A is                 UnitUpperBandTriangular, X is          Column) as ztbsv_n_dun;
export trsv<Complex Double>(A is                 UnitUpperBandTriangular, X is Reversed Column) as ztbsv_n_dur;
export trsv<Complex Double>(A is                 UnitLowerBandTriangular, X is          Column) as ztbsv_n_dln;
export trsv<Complex Double>(A is                 UnitLowerBandTriangular, X is Reversed Column) as ztbsv_n_dlr;
export trsv<Complex Double>(A is                TransUpperBandTriangular, X is          Column) as ztbsv_t_eun;
export trsv<Complex Double>(A is                TransUpperBandTriangular, X is Reversed Column) as ztbsv_t_eur;
export trsv<Complex Double>(A is                TransLowerBandTriangular, X is          Column) as ztbsv_t_eln;
export trsv<Complex Double>(A is                TransLowerBandTriangular, X is Reversed Column) as ztbsv_t_elr;
export trsv<Complex Double>(A is            TransUnitUpperBandTriangular, X is          Column) as ztbsv_t_dun;
export trsv<Complex Double>(A is            TransUnitUpperBandTriangular, X is Reversed Column) as ztbsv_t_dur;
export trsv<Complex Double>(A is            TransUnitLowerBandTriangular, X is          Column) as ztbsv_t_dln;
export trsv<Complex Double>(A is            TransUnitLowerBandTriangular, X is Reversed Column) as ztbsv_t_dlr;
export trsv<Complex Double>(A is Conjugated     TransUpperBandTriangular, X is          Column) as ztbsv_u_eun;
export trsv<Complex Double>(A is Conjugated     TransUpperBandTriangular, X is Reversed Column) as ztbsv_u_eur;
export trsv<Complex Double>(A is Conjugated     TransLowerBandTriangular, X is          Column) as ztbsv_u_eln;
export trsv<Complex Double>(A is Conjugated     TransLowerBandTriangular, X is Reversed Column) as ztbsv_u_elr;
export trsv<Complex Double>(A is Conjugated TransUnitUpperBandTriangular, X is          Column) as ztbsv_u_dun;
export trsv<Complex Double>(A is Conjugated TransUnitUpperBandTriangular, X is Reversed Column) as ztbsv_u_dur;
export trsv<Complex Double>(A is Conjugated TransUnitLowerBandTriangular, X is          Column) as ztbsv_u_dln;
export trsv<Complex Double>(A is Conjugated TransUnitLowerBandTriangular, X is Reversed Column) as ztbsv_u_dlr;
