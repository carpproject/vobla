/*
 * Copyright (c) 2013-2014, ARM Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
function get_vec_max(in A: Real[]): Real
{
  let res = A[0];
  for (i in A.getRange()) {
    res = max(res, A[i]);
  }
  return res;
}

function get_mat_max(in A: Real[][]): Real
{
  let res = A[0][0];
  for (i in (A[*][0]).getRange()) {
    res = max(res, get_vec_max(A[i][*]));
  }
  return res;
}

function test(): Real
{
  let v = [1.0 5.0 10.0 10.0 5.0 1.0];
  let m = [[1.0 0.0 0.0 0.0 0.0]
           [1.0 1.0 0.0 0.0 0.0]
           [1.0 2.0 1.0 0.0 0.0]
           [1.0 3.0 3.0 1.0 0.0]
           [1.0 4.0 6.0 4.0 1.0]];
  return get_vec_max(v) + get_mat_max(m);
}
